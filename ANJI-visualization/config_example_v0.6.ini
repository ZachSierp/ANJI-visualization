# At some point this can be explored as a way to configure how plotting will happen
# instead of just changing the parameters in the script each time, or always need to configure it
#
#  Go here to see how to set this up
#
#  https://docs.python.org/3/library/configparser.html
#
#  To setup reading a variable in from the command line when its run (for selecting config file):
#  https://www.tutorialspoint.com/python/python_command_line_arguments.htm
#

#Defining Input and Output Sections
[InputSection]

############ FEATURES UNAVAILABLE ##############
#where to get the data. Should be directory with sub xml files. Directory names will be used for plot labeling
data_input_filename: data/test_run_directory

#filepath for secondary comparison data
comparison_data_input_filename: data/test_run_directory
#######################################################

[OutputSection]
# provide a custom name for graphs. NOTE: NAME WILL BE GIVEN TO ALL GRAPHS IN THE FOLLOWING FORMAT: CUSTOM_NAME_DATA_TYPE
# If blank, the naming convention will default to the filename!
# SPECIAL CHARACTERS WILL BE REMOVED. SPACES WILL BE REPLACED WITH UNDERSCORES
custom_name: Test Name                    

# Do we want to show the plot on completion?
show_plot_output: True
# Do we want to save the plots?
save_plot_output: False
#where to store the images. Should be output directory. Default is "plots"
plot_output_filename: plots

#Offset Options
[OffsetOptions]
# defines the x-offset for the deviation and group plots
offset: 1
# defines whether to show error bars or shaded regions
shaded_region: True

#labeling options
[LabelOptions]
# Enable or Disable the Legend
use_legend: True
# Use the #SUMMARY data to label the graph
use_properties: True
# OPTIONAL: Provide a list of propery keywords to group runs in an experiment by color. Groups should be separated by commas in a single string.
# properties will receive color in the order they are listed: red, blue, green, cyan, yellow, magenta, and black.
properties_groups: std, spat_mod, topo_mod
#OPTION FOR PROPERTIES GROUPS: If true, the legend will show an abreviated version of the properties, combining like jobs together for a smaller more legible legend.
# EXAMPLE: [LINE_COLOR0] Jobs 1-10, std [LINE_COLOR1] Jobs 11-20, act_mod
simplify_legend: True
# plots the standard deviation comparison of all subgroups for each active or true plot option. NOTE: THIS OPTION WILL DOUBLE THE PLOT OUTPUT!!!!!
plot_subgroups: True
# plots the bar graph with standard deviation of the subplots. NOTE: WILL DO THIS FOR EVERY SUBGROUP PLOT
plot_bar_comparison: True
# set the error bar color here. DEFAULT COLOR: GRAY 
# IMPORTANT NOTE: ALL COLORS MUST BE REPRESENTED AS R,G,B COMBINATIONS (SEE COLORS BELOW). IF STRINGS ARE GIVEN, COLOR WILL BE DEFAULT
bar_ecolor:
# Determine the line style for aggregate plots. Must be one of
# solid or  -
# dashed or --
# dotted or :
# dashdot or -.
agg_ls: dotted
# OPTION FOR COLOR SELECTION. COLORS CAN BE ENTERED USING R,G,B COMBINATIONS OR STRING LITERALS (RED, BLUE, WHITE)
# INPUT FORMAT MUST BE : red, white, blue OR (0,0,0), (255,255,255)
colors: red, blue, black

#which data to plot about fitness
[PlotOptionsFitness]
# plots all max fitness values of each job on one aggregate graph
show_max_fitness: True
# plots a standard deviation graph with average max fitness
show_mean_max_fitness: False
# plots aggregate minimum fitness from all jbos
show_min_fitness: False
# plots single line, mean minimum fitness from all jobs
show_mean_min_fitness: False
# plots aggregate average fitness from all jobs
show_avg_fitness: False
# plots single line, mean average fitness from all jobs
show_mean_avg_fitness: False

#which data to plot about complexity
[PlotOptionsComplexity]
# plots all champ complexity values of each job on one aggregate graph
show_champ_complexity: False
# plots a standard deviation graph with average champ complexity
show_mean_champ_complexity: False
# plots aggregate max complexity from each job
show_max_complexity: False
# plots single line, mean max complexity of all jobs
show_mean_max_complexity: False
# plots aggregate minimum complexity from each job
show_min_complexity: False
# plots single line, mean min complexity of all jobs
show_mean_min_complexity: False
# plots aggregate average complexity of all jobs
show_avg_complexity: False
# plots single line, mean average complexity of all jobs
show_mean_avg_complexity: False


#which data to plot about species
[PlotOptionsSpecies]
# show the number of species for each job at every generation
show_species_count: False
# show the percentage of sepcies with a max fitness value above a given max threshold              
show_percent_max_threshold: False
# show the percentage of species with a min fitness value above a given min threshold
show_percent_min_threshold: False
# show the percentage of species with an avg fitness value above a given avg threshold
show_percent_avg_threshold: False
# show the std deviation of all three species values for a single experiment in a single comparison graph. Will compare the standard deviation of each species count above their given threshold.
species_comparison: False

# provide corresponding thresholds
max_threshold: 900
min_threshold: 500
avg_threshold: 750

#set rules for standard deviation plotting
[PlotComparisonOptions]
# plot mean max, min, and avg fitness for each experiment
plot_mean_all_fitness: False
# plot mean champ, max, min, and avg complexity for each experiment
plot_mean_all_complexity: False
# compare mean min fitness of experiment pairs   
compare_min_fitness: False
# compare mean avg fitness    
compare_avg_fitness: False
# compare mean champ complexity    
compare_champ_complexity: False
# compare mean max complexity  
compare_max_complexity: False
# compare mean min complexity    
compare_min_complexity: False
# compare mean avg complexity    
compare_avg_complexity: False
# plots standard deviation comparison of networks in pairs of two determeined by their input order. i.e.(0,1),(2,3),... (x-1, x)
compare_maximum_fitness: True
# plots the significance of each standard deviation comparison graph
plot_significance: True

######## graphical options for standard deviation graphing
[PlotDeviationComparisonOptions]
# Do we want a continuous connecting line, or individual points on a graph? 
# DEFAULT = TRUE
continuous_lines: True
# If you want default sizes, replace both with 0
# how large do we want the actual points ot be on the graph? DEFAULT = 0
point_size: 0

# How wide do we want the error bar cap to be? DEFAULT = 0
error_cap_size: 0

# Set the transparency of the significance plot for readability. Transparency value is a percentage between 0 (completely transparent) and 100 (completely opaque). DEFAULT = 50.  Do not include precentage sign. Do not use decimals.
significance_transparency: 50

#set epoch settings for plotting data. Must be a natural number greater than 0. Default is 5 (parses and plots data for every 5th generation)
[PlotOptionsEpoch]
epoch_size: 5

#could add things like the follow:
#
# percentage of species with a chromosome with fitness above some constant THRESHOLD
# size of species with the max fitness agent for a generation
#

